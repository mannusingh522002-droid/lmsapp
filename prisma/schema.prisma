// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    INSTRUCTOR
    STUDENT
}

model User {
    id                String        @id @default(uuid())
    name              String
    email             String        @unique
    password          String
    role              Role          @default(STUDENT)
    courses           Course[]      @relation("InstructorCourses")
    emailVerified     Boolean       @default(false)
    verificationToken String?
    enrollments       Enrollment[]
    submissions       Submission[]
    transactions      Transaction[]
    sessions          UserSession[]
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
}

model Course {
    id           String        @id @default(uuid())
    title        String
    description  String
    price        Float
    imageUrl     String?
    published    Boolean       @default(false)
    instructor   User          @relation("InstructorCourses", fields: [instructorId], references: [id])
    instructorId String
    modules      Module[]
    enrollments  Enrollment[]
    transactions Transaction[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

model Module {
    id        String   @id @default(uuid())
    title     String
    content   String? // Optional text-based content
    videoUrl  String? // Embed or upload URL
    pdfUrl    String? // Resource file
    course    Course   @relation(fields: [courseId], references: [id])
    courseId  String
    quiz      Quiz?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Quiz {
    id          String       @id @default(uuid())
    module      Module       @relation(fields: [moduleId], references: [id])
    moduleId    String       @unique // 1-1 relation with Module
    questions   Json
    submissions Submission[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model Submission {
    id          String   @id @default(uuid())
    quiz        Quiz     @relation(fields: [quizId], references: [id])
    quizId      String
    student     User     @relation(fields: [studentId], references: [id])
    studentId   String
    answers     Json
    score       Float?
    submittedAt DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Enrollment {
    id        String   @id @default(uuid())
    student   User     @relation(fields: [studentId], references: [id])
    studentId String
    course    Course   @relation(fields: [courseId], references: [id])
    courseId  String
    progress  Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([studentId, courseId]) // Prevent duplicate enrollments
}

model Transaction {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    course    Course   @relation(fields: [courseId], references: [id])
    courseId  String
    amount    Float
    status    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserSession {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    token     String   @unique
    userAgent String?
    ipAddress String?
    location  String?
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiresAt DateTime
}
